---
title: "Developing Bioinformatics Software: Continuous Integration & Gitflow"
author: Kelly Sovacool
date: last-modified
categories:
    - R
    - Python
    - Bioinformatics
    - Software Development
execute:
    eval: true
    echo: true
---


:::: {.columns}
::: {.left}
:::
::: {.right}
:::
::::

# git flow

Git flow is a model for using issues, branches, and pull requests for software maintenance.

1. An issue is opened
    - a developer or user notices a bug, requests a feature, or asks a question.
1. Engage in the issue comments
    - to clarify the issue, ask for a reproducible example, etc.
1. Work on the issue
    1. create a new branch and switch to it.
    1. write tests that will pass when the issue is resolved.
    1. write or edit code to resolve the issue.
    1. (possibly) write more tests to make sure edge cases and failure modes are handled.
    1. make sure your tests pass.
1. Create a pull request
    1. assign or request a reviewer.
    1. the reviewer reviews your code.
    1. you make any requested changes.
    1. the reviewer approves your pull request once they're happy with it.
    1. merge the pull request.
1. Celebrate that you resolved an issue!

# continuous integration + git flow = magic

You don't have to remember to check that your package works, lint your code, 
update the documentation website: let the machines do it for you automatically!

Continuous integration is

How does this modify our git flow? The CI service will make sure the package 
builds, run our tests, etc. when we open the pull request, so we don't have to!

## ci service options

- GitHub Actions
- Travis
- Jenkins
- CircleCI
- Azure DevOps

## anatomy of a github actions workflow

## useful components of continuous integration

### build

### test

### document

- R: roxygen2
- Python: sphinx

### lint or style code

- R: styler
- Python: black
