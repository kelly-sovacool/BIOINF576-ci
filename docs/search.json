[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Developing Bioinformatics Software: Continuous Integration",
    "section": "",
    "text": "The current best practice for using git to manage collaborative software projects is known as trunk-based development. Under this model, small changes are frequently made in different branches, then merged into the main “trunk” (i.e. the main or master branch) of the repo after passing peer review. The steps look like this:\n\n\n\n\n\n\n\nAn issue is opened\n\na developer or user notices a bug, requests a feature, or asks a question.\n\n\nEngage in the issue comments\n\nto clarify the issue, ask for a reproducible example, etc.\n\n\nWork on the issue\n\ncreate a new branch and switch to it.\nwrite tests that will pass when the issue is resolved.\nwrite or edit code to resolve the issue.\n(possibly) write more tests to make sure edge cases and failure modes are handled.\nwrite/update documentation if needed.\nmake sure your tests pass and the package still builds.\n\n\nCreate a pull request\n\nassign or request a reviewer.\nthe reviewer reviews your code.\nyou make any requested changes.\nthe reviewer approves your pull request once they’re happy with it.\nmerge the pull request.\n\n\nCelebrate that you resolved an issue!\n\n\n\n\nYou can have multiple issues open at any stage of the process at a time. You might start working on a feature, switch to fixing a time-sensitive bug and resolve it, then later go back to working on that feature. Meanwhile, collaborators are working on other issues too! This process enables highly collaborative and asynchronous work."
  },
  {
    "objectID": "index.html#getting-started-with-a-simple-action",
    "href": "index.html#getting-started-with-a-simple-action",
    "title": "Developing Bioinformatics Software: Continuous Integration",
    "section": "Getting started with a simple action",
    "text": "Getting started with a simple action\nEvery Actions workflow resides in .github/workflows/ and needs:\n\n\non – events that trigger the workflow\n\njobs – list of independent jobs each with steps to run in sequence.\n\n\n\n\n.github/workflows/greet.yml\n\n# name of the workflow\nname: greet \n\n# when the workflow should run\non: \n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches: \n      - main\n      - master\n\n# independent jobs in the workflow\njobs: \n  # this workflow just has one job called \"greet\"\n  greet: \n    # the operating system to use for this workflow\n    runs-on: ubuntu-latest \n    # list of steps in the workflow\n    steps: \n      # use an action provided by github to checkout the repo\n      - uses: actions/checkout@v3 \n      \n      # a custom step that runs a couple shell commands\n      - name: List \n        run: |\n            echo \"listing files in the bioinitio directory\"\n            ls bionitio\n      \n      # a custom step that runs R code\n      - name: Greet \n        run: print(\"Hello, world!\")\n        # Replace `shell: Rscript {0}` with `shell: python {0}` to run Python code instead!\n        shell: Rscript {0}  \n\n\n\n\n\n\n\n\nCreate the “Hello world” action\n\n\n\n\nOpen an issue with the title “Set up continuous integration”.\nSwitch to a new branch called ci.\nAdd this file to your repo at .github/workflows/greet.yml.\nReplace bionitio with the name of your package.\nCommit and push it to GitHub.\nFinally, open a pull request from your new branch into main.\n\n\n\nDid your workflow run? On GitHub, go to the Actions tab of your repo. Opening the pull request should have triggered the workflow to run.\nOnce the workflow finishes (about 15 seconds), it will either have a green checkmark (✅) for success or a red X (❌) for failure.\n\nClick on the workflow run. Then under ‘jobs’, click on the job ‘greet’. You’re now viewing the log file for the job. You can click on the arrows to expand the details for each step.\n\nYou can also see the status of the action from the Pull Request summary page.\n\n\n\n\n\n\ngreet status\n\n\n\nIn Slack, react with ✅ or ❌ to indicate the status of your workflow."
  },
  {
    "objectID": "index.html#test-suite",
    "href": "index.html#test-suite",
    "title": "Developing Bioinformatics Software: Continuous Integration",
    "section": "Test suite",
    "text": "Test suite\nThis initial “hello world” workflow is cute, but not very useful. Let’s edit the workflow to run our test suite for us automatically!\nR: use devtools::test() to run just the tests, or devtools::check() to run all checks for CRAN.\n\n\n\nR .github/workflows/ci.yml\n\nname: CI\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches: \n      - main\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      R_KEEP_PKG_SOURCE: yes\n    steps:\n      - uses: actions/checkout@v3\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true\n      - uses: r-lib/actions/setup-r-dependencies@v2\n        with:\n          extra-packages: any::rcmdcheck\n          needs: check\n          working-directory: bionitio\n      - name: Check\n        uses: r-lib/actions/check-r-package@v2\n        with:\n          args: 'c(\"--no-manual\", \"--as-cran\")'\n          working-directory: bionitio\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe r-lib actions assume that the top level of your repo is the same as the top level of your R package. If that’s not the case, you’ll need to specify the working-directory.\nFor my example project, bionitio-r is the top level of the git repo, and from there the R package resides in bionitio:\nbionitio-r\n├── README.md\n├── .github\n│   └── workflows\n│       └── ci.yml\n├── bionitio\n│   ├── DESCRIPTION\n│   ├── R\n│   │   ├── bionitio.R\n│   │   └── file_utils.R\n│   └── tests\n│       ├── testthat\n│       │   └── test-stats.R\n│       └── testthat.R\n\n\nPython: use pytest to run the test suite.\n\n\n\nPy .github/workflows/ci.yml\n\nname: ci\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.11\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"3.11\"\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install flake8 pytest\n        if [ -f requirements.txt ]; then \n            pip install -r requirements.txt\n        fi\n    - name: Test with pytest\n      run: |\n        pytest .\n\n\nIn each of these workflows, the action checks out the repo, installs R or Python, installs the dependencies of the package, then runs the tests. If any of your tests fail, the whole actions workflow will fail too.\n\n\n\n\n\n\nTesting with CI\n\n\n\nModify your CI workflow to run the test suite and push it. Does the CI workflow succeed or fail?\nYou may get failures if you haven’t been running your unit tests as you develop your code base. Take a few minutes to open issues for each test that failed.\n\n\nWorkflow status badges\nEach Actions workflow has a status badge that indicates whether the action is passing or failing. You may have come across status badges in GitHub README files of packages you use. Putting a CI status badge in the README file is a popular way for project maintainers to prominently display that CI is set up and it’s working!\n\n\n\n\n\n\nAdd the workflow status badge to your README\n\n\n\nUnder the Actions tab, click the name of the workflow (e.g. ci), click the triple dots menu (...) in the upper right corner, and select Create status badge.\nIn the pop-up menu, click Copy status badge Markdown, paste it into your README.md file, then commit and push your change.\nReact to the slack message with ✅ when you’re finished.\n\n\n\n\nNow anyone who takes a look at your README file will see that your project uses continuous integration!\nCode coverage\ncodecov is free for open source projects!\ncodecov status badge"
  },
  {
    "objectID": "index.html#lint-and-style-code",
    "href": "index.html#lint-and-style-code",
    "title": "Developing Bioinformatics Software: Continuous Integration",
    "section": "Lint and style code",
    "text": "Lint and style code\n\nR: lintr & styler\nPython: flake8 & black"
  },
  {
    "objectID": "index.html#document",
    "href": "index.html#document",
    "title": "Developing Bioinformatics Software: Continuous Integration",
    "section": "Document",
    "text": "Document\n\nR: roxygen2\nPython: sphinx\n\nSetup a documentation website\nGitHub Pages will host your docs for free!"
  }
]